(in-package skat-comm)

(defstruct queue "Eine queue aus cons-Zellen. Zu verwenden mit queue-push und queue-pop." (elements nil) end)

(defun queue-push (obj queue)
  "Fügt ein neues Element in die Queue ein."
  (if (null (queue-elements queue))
      (setf (queue-elements queue) (cons obj nil)
	    (queue-end queue) (queue-elements queue))
      (setf (cdr (queue-end queue)) (cons obj nil)
	    (queue-end queue) (cdr (queue-end queue)))))

(defun queue-pop (queue)
  "Holt ein Element aus der Queue heraus."
  (pop (queue-elements queue)))

(defun queue-next (queue)
  "Gibt das Element zurück, das als nächstes aus der Queue gepopt würde."
  (car (queue-elements queue)))

(defclass xmpp-skat-connection (xmpp:connection)
  ((comm-object :accessor comm-object)))

(defclass xmpp-comm (base-comm)
  ((arrived-requests :accessor arrived-requests :initform (make-queue))
   (connection :accessor connection)
   (stop-working :accessor stop-working :initform nil)
   (resource :accessor resource)
   (own-address :accessor own-address)))

(defun push-request (comm sender request-name &rest request-args)
  "Fügt eine Anfrage zur Queue hinzu."
  (queue-push (append (list request-name sender) request-args) (arrived-requests comm))
  (cons request-name request-args))

(defmethod start ((comm xmpp-comm))
  "Initialisiert dieses XMPP-Verbindungsobjekt. Fügt nur die Login-Parameterliste für Kernel zum Abruf ein."
  (push-request comm comm 'login-parameters 
		'((username . string) 
		  (hostname . string) 
		  (jid-domain-part . string) 
		  (resource . string)
		  (password . string)
		  (mechanism . (:plain :digest-md5))))
  (values))

(defmacro let-from-assoc-list ((assoc-list &rest vars) &body body)
  "Erzeugt ein let mit den Variablen vars, deren Werte aus aus assoc-list gewonnen werden.
assoc-list ist eine Liste von cons-Zellen. Die Variable-Wert-Paare werden mit assoc gefunden."
  `(let ,(loop for name in vars
	       collect `(,name (cdr (assoc ',name ,assoc-list))))
     ,@body))

(defmethod login ((comm xmpp-comm) data)
  "Stellt die XMPP-Verbindung zum Server her und loggt sich dort mit den bereitgestellten Daten ein."
  (let-from-assoc-list (data username hostname jid-domain-part resource password mechanism)
    (setf (connection comm) (xmpp:connect :hostname hostname :jid-domain-part jid-domain-part :class 'xmpp-skat-connection))
    (setf (comm-object (connection comm)) comm)
    (xmpp:auth (connection comm) username password resource :mechanism mechanism)
    (setf (resource comm) resource
	  (own-address comm) (format nil "~a@~a/~a" username jid-domain-part resource))))

(defmethod get-request ((comm xmpp-comm))
  "Gibt den ersten Request in der Warteschlange zurück.
Zwei Rückgabewerte: 1. Bezeichnung der Anfrage - ein Symbol
                    2. Sender
                    3. Argumentenliste - eine Liste"
  (let ((top-request (queue-pop (arrived-requests comm))))
    (values (car top-request) (cadr top-request) (cddr top-request))))

(defmethod has-request ((comm xmpp-comm))
  "Gibt t zurück, wenn sich Anfragen mit get-request abrufen ließen."
  (not (null (queue-next (arrived-requests comm)))))

(defmethod send ((comm xmpp-comm) address request-name &rest request-args)
  "Sendet eine Anfrage an einen anderen Spieler. Das Format der Anfrage ist eine Liste: (cons request-name request-args)."
  (xmpp:message (connection comm) address (format nil "~s" (cons request-name request-args))))

(defmethod stop ((comm xmpp-comm))
  "Signalisiert dem XMPP-Kommunikationsmodul die Arbeit einzustellen. 
Setzt stop-working auf t und schickt sich selbst eine Anfrage, um aus xmpp:receive-stanza herauszukommen."
  (setf (stop-working comm) t)
  (send comm (own-address comm) 'stop))

(defun receive-loop (comm)
  "Empfängt so lange XMPP-Stanzas, bis nach Empfang eines Stanzas (stop-working comm) t ergibt."
  (loop until (stop-working comm)
     do (xmpp:receive-stanza (connection comm))))

(define-condition received-other-content ()
  ((message :accessor message :initarg :message)))

(defmethod xmpp:handle ((connection xmpp-skat-connection) (message xmpp:message))
  "Behandelt eingehende XMPP-Nachrichten-Stanzas. Wenn die Nachricht eine Liste ist, wird sie in die Queue gepackt. 
Sonst wird received-other-content signalisiert."
  (let ((read-message (handler-case (read-from-string (xmpp:body message))
			(end-of-file () 'malformed)))
	(sender (xmpp:from message)))
    (if (listp read-message)
	(push-request (comm-object connection) sender (car read-message) (cdr read-message))
	(signal 'received-other-content :message message))))

;; TODO: XMPP-Zeugs testen