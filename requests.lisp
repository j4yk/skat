(in-package skat-requests)

(defun symbol-to-keyword (symbol)
  (intern (symbol-name symbol) 'keyword))

(let ((request-definitions nil))
  (defun add-request-definition (name &rest parameters)
    (push (cons (symbol-to-keyword name) (mapcar #'symbol-to-keyword parameters)) request-definitions))
  (defun request-parameters (request-name)
    (cdr (assoc (symbol-to-keyword request-name) request-definitions)))
;;   (defun request-definition (request-name)
;;     (assoc (symbol-to-keyword request-name) request-definitions))
  (defmacro defrequest (name &rest parameters)
    `(apply #'add-request-definition ',name ',parameters))
  (defun correct-parameters-p (name &rest parameters)
    (equal (mapcar #'symbol-to-keyword parameters) (cdr (assoc (symbol-to-keyword name) request-definitions)))))

(defrequest login-parameters parameters)
(defrequest login-data data)
(defrequest own-address address)
(defrequest registration-parameters parameters)
(defrequest registration-data data)
(defrequest registration-request)
(defrequest registration-reply accepted)
(defrequest server-update events)
(defrequest unregister)
(defrequest playmates left right)
(defrequest game-start)
(defrequest cards cards)
(defrequest start-bidding listener min-value)
(defrequest listen bidder)
(defrequest bid value)
(defrequest join value)
(defrequest pass value)
(defrequest declarer declarer)
(defrequest hand-decision hand)
(defrequest skat skat)
(defrequest declaration declaration)
(defrequest card card)
(defrequest choose-card)
(defrequest trick cards winner)
(defrequest game-over)
(defrequest cards-score declarer-scrore defenders-score)
(defrequest game-result declaration won score)
(defrequest match-score player1-address player1-score
	    player2-address player2-score
	    player3-address player3-score)
(defrequest game-end prompt)
(defrequest logout)
